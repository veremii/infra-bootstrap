version: "3.9"

# Пример stack.yml для вашего приложения
# Использует инфраструктуру, созданную infra-bootstrap

networks:
  app:
    external: true
  edge:
    external: true

volumes:
  postgres_data:
  redis_data:

secrets:
  app_db_password:
    external: true
  app_jwt_secret:
    external: true
  app_api_key:
    external: true

services:
  # PostgreSQL база данных
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: myapp
      POSTGRES_USER: myapp
      POSTGRES_PASSWORD_FILE: /run/secrets/app_db_password
    secrets:
      - app_db_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app
    deploy:
      placement:
        constraints:
          - node.labels.role==app
      resources:
        limits:
          cpus: '2'
          memory: 4G

  # Redis для кэша и сессий
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - app
    deploy:
      placement:
        constraints:
          - node.labels.role==app
      resources:
        limits:
          cpus: '0.5'
          memory: 1G

  # Backend API
  backend:
    image: ghcr.io/your-org/backend:${VERSION:-latest}
    secrets:
      - app_db_password
      - app_jwt_secret
      - app_api_key
    environment:
      NODE_ENV: production
      DATABASE_URL: postgres://myapp:@postgres:5432/myapp
      REDIS_URL: redis://redis:6379
      # Secrets читаются из файлов
      DB_PASSWORD_FILE: /run/secrets/app_db_password
      JWT_SECRET_FILE: /run/secrets/app_jwt_secret
      API_KEY_FILE: /run/secrets/app_api_key
    networks:
      - app
      - edge
    deploy:
      replicas: 3
      placement:
        constraints:
          - node.labels.role==app
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      labels:
        # Публикация через Traefik
        - "traefik.enable=true"
        - "traefik.http.routers.api.rule=Host(`api.example.com`)"
        - "traefik.http.routers.api.entrypoints=websecure"
        - "traefik.http.routers.api.tls.certresolver=le"
        - "traefik.http.services.api.loadbalancer.server.port=3000"
        - "traefik.http.services.api.loadbalancer.sticky=true"
        - "traefik.http.services.api.loadbalancer.sticky.cookie.name=server-id"
        # Rate limiting
        - "traefik.http.middlewares.api-ratelimit.ratelimit.average=100"
        - "traefik.http.routers.api.middlewares=api-ratelimit@docker"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    image: ghcr.io/your-org/frontend:${VERSION:-latest}
    networks:
      - edge
    deploy:
      replicas: 2
      placement:
        constraints:
          - node.labels.role==edge
      update_config:
        parallelism: 1
        delay: 10s
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.app.rule=Host(`app.example.com`)"
        - "traefik.http.routers.app.entrypoints=websecure"
        - "traefik.http.routers.app.tls.certresolver=le"
        - "traefik.http.services.app.loadbalancer.server.port=80"
        # Кэширование статики
        - "traefik.http.middlewares.app-cache.headers.customresponseheaders.Cache-Control=public, max-age=3600"
        - "traefik.http.routers.app.middlewares=app-cache@docker"

  # Миграции БД (one-shot job)
  migrations:
    image: ghcr.io/your-org/backend:${VERSION:-latest}
    command: npm run migrate
    secrets:
      - app_db_password
    environment:
      DATABASE_URL: postgres://myapp:@postgres:5432/myapp
      DB_PASSWORD_FILE: /run/secrets/app_db_password
    networks:
      - app
    deploy:
      restart_policy:
        condition: none
      placement:
        constraints:
          - node.labels.role==app

